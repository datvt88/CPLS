'use client'

import { useState, useMemo } from 'react'
import dynamic from 'next/dynamic'
import { Timeframe, StockPriceData } from '@/types/stock'
import {
  generateMockStockData,
  mockVietnameseStocks,
  getStockBySymbol,
} from '@/utils/mockStockData'
import { calculateWoodiePivotPoints } from '@/components/LightweightChart'

// Helper function to get ISO week number
function getISOWeek(date: Date): number {
  const d = new Date(date)
  d.setHours(0, 0, 0, 0)
  d.setDate(d.getDate() + 4 - (d.getDay() || 7))
  const yearStart = new Date(d.getFullYear(), 0, 1)
  return Math.ceil((((d.getTime() - yearStart.getTime()) / 86400000) + 1) / 7)
}

// Helper function to aggregate OHLC data
function aggregateGroup(group: StockPriceData[]): StockPriceData {
  if (group.length === 0) throw new Error('Empty group')
  if (group.length === 1) return group[0]

  const open = group[0].open
  const close = group[group.length - 1].close
  const high = Math.max(...group.map(d => d.high))
  const low = Math.min(...group.map(d => d.low))
  const nmVolume = group.reduce((sum, d) => sum + d.nmVolume, 0)
  const date = group[group.length - 1].date // Use last date in group

  return {
    date,
    open: Number(open.toFixed(2)),
    high: Number(high.toFixed(2)),
    low: Number(low.toFixed(2)),
    close: Number(close.toFixed(2)),
    nmVolume,
  }
}

// Dynamic import to avoid SSR issues with lightweight-charts
const LightweightChart = dynamic(() => import('@/components/LightweightChart'), {
  ssr: false,
  loading: () => (
    <div className="h-[500px] w-full flex items-center justify-center bg-[--panel] rounded-xl border border-gray-800">
      <div className="text-center">
        <div className="w-12 h-12 border-4 border-purple-600 border-t-transparent rounded-full animate-spin mx-auto mb-3"></div>
        <p className="text-gray-400">ƒêang t·∫£i bi·ªÉu ƒë·ªì...</p>
      </div>
    </div>
  ),
})

export default function StocksPage() {
  const [stockSymbol, setStockSymbol] = useState('VNM')
  const [timeframe, setTimeframe] = useState<Timeframe>('1d')
  const [chartType, setChartType] = useState<'candlestick' | 'line'>('candlestick')

  const stockInfo = getStockBySymbol(stockSymbol)

  // Generate mock data for selected stock with correct reference price (3 years = 1095 days)
  const rawHistoricalData = useMemo(() => {
    if (!stockInfo) return []
    return generateMockStockData(1095, stockInfo.referencePrice)
  }, [stockSymbol, stockInfo])

  // Aggregate data based on timeframe
  const historicalData = useMemo(() => {
    if (rawHistoricalData.length === 0) {
      console.log('No raw data available')
      return []
    }

    console.log('Raw data length:', rawHistoricalData.length, 'Timeframe:', timeframe)

    if (timeframe === '1d') {
      return rawHistoricalData
    }

    // Aggregate for weekly or monthly
    const aggregated: StockPriceData[] = []
    const sortedData = [...rawHistoricalData].sort(
      (a, b) => new Date(a.date).getTime() - new Date(b.date).getTime()
    )

    let currentGroup: StockPriceData[] = []
    let currentPeriodKey = ''

    sortedData.forEach((dataPoint, index) => {
      const date = new Date(dataPoint.date)
      let periodKey = ''

      if (timeframe === '1w') {
        // Group by week (ISO week number)
        const week = getISOWeek(date)
        const year = date.getFullYear()
        periodKey = `${year}-W${week}`
      } else if (timeframe === '1m') {
        // Group by month
        periodKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`
      }

      // Start new group or add to current group
      if (currentPeriodKey === '') {
        // First item
        currentGroup = [dataPoint]
        currentPeriodKey = periodKey
      } else if (periodKey !== currentPeriodKey) {
        // Period changed, save current group and start new one
        if (currentGroup.length > 0) {
          aggregated.push(aggregateGroup(currentGroup))
        }
        currentGroup = [dataPoint]
        currentPeriodKey = periodKey
      } else {
        // Same period, add to current group
        currentGroup.push(dataPoint)
      }

      // Handle last group
      if (index === sortedData.length - 1 && currentGroup.length > 0) {
        aggregated.push(aggregateGroup(currentGroup))
      }
    })

    console.log('Aggregated data length:', aggregated.length)
    return aggregated
  }, [rawHistoricalData, timeframe])

  // Calculate pivot points
  const pivotPoints = useMemo(() => {
    return calculateWoodiePivotPoints(historicalData)
  }, [historicalData])

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="bg-[--panel] rounded-xl p-6 border border-gray-800">
        <h1 className="text-3xl font-bold text-white mb-2">C·ªï phi·∫øu</h1>
        <p className="text-[--muted]">Theo d√µi v√† ph√¢n t√≠ch bi·ªÉu ƒë·ªì c·ªï phi·∫øu Vi·ªát Nam</p>
      </div>

      {/* Stock Symbol Input */}
      <div className="bg-[--panel] rounded-xl p-6 border border-gray-800">
        <label htmlFor="stock-symbol" className="block text-sm font-medium text-gray-400 mb-2">
          Nh·∫≠p m√£ c·ªï phi·∫øu
        </label>
        <div className="flex gap-3">
          <input
            id="stock-symbol"
            type="text"
            value={stockSymbol}
            onChange={(e) => setStockSymbol(e.target.value.toUpperCase())}
            placeholder="VD: VNM, HPG, VIC, VHM..."
            className="flex-1 px-4 py-3 bg-gray-800 text-white rounded-lg border border-gray-700 focus:outline-none focus:border-purple-500 uppercase"
          />
          <button
            onClick={() => {
              // Scroll to technical analysis section
              const technicalSection = document.getElementById('technical-analysis')
              technicalSection?.scrollIntoView({ behavior: 'smooth', block: 'start' })
            }}
            className="px-6 py-3 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors font-medium whitespace-nowrap"
          >
            üìä Xem PTKT
          </button>
        </div>
        <p className="text-xs text-gray-500 mt-2">
          Nh·∫≠p m√£ c·ªï phi·∫øu Vi·ªát Nam (VD: VNM, HPG, VIC, VHM, FPT, TCB, MSN, VRE)
        </p>
      </div>

      {/* Stock Detailed Info Card */}
      {stockInfo && (
        <div className="bg-[--panel] rounded-xl p-6 border border-gray-800">
          <div className="mb-6">
            <h2 className="text-3xl font-bold text-white mb-1">
              {stockInfo.symbol} - {stockInfo.name}
            </h2>
            <p className="text-[--muted] text-sm">C·ªï phi·∫øu ni√™m y·∫øt tr√™n HOSE/HNX</p>
          </div>

          {/* Price Grid */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
            {/* Current Price */}
            <div className="bg-gray-800/50 rounded-lg p-4">
              <div className="text-[--muted] text-xs mb-1">Gi√° hi·ªán t·∫°i</div>
              <div className="text-2xl font-bold text-white">{stockInfo.lastPrice.toFixed(2)}</div>
              <div
                className={`text-sm font-semibold ${
                  stockInfo.change >= 0 ? 'text-green-400' : 'text-red-400'
                }`}
              >
                {stockInfo.change >= 0 ? '+' : ''}
                {stockInfo.change.toFixed(2)} ({stockInfo.changePercent >= 0 ? '+' : ''}
                {stockInfo.changePercent.toFixed(2)}%)
              </div>
            </div>

            {/* Reference Price */}
            <div className="bg-yellow-900/20 rounded-lg p-4 border border-yellow-700/30">
              <div className="text-yellow-400 text-xs mb-1">Gi√° tham chi·∫øu</div>
              <div className="text-2xl font-bold text-yellow-300">
                {stockInfo.referencePrice.toFixed(2)}
              </div>
              <div className="text-xs text-yellow-400/70">Gi√° ƒë√≥ng c·ª≠a phi√™n tr∆∞·ªõc</div>
            </div>

            {/* Ceiling Price */}
            <div className="bg-purple-900/20 rounded-lg p-4 border border-purple-700/30">
              <div className="text-purple-400 text-xs mb-1">Gi√° tr·∫ßn</div>
              <div className="text-2xl font-bold text-purple-300">
                {stockInfo.ceilingPrice.toFixed(2)}
              </div>
              <div className="text-xs text-purple-400/70">+7%</div>
            </div>

            {/* Floor Price */}
            <div className="bg-cyan-900/20 rounded-lg p-4 border border-cyan-700/30">
              <div className="text-cyan-400 text-xs mb-1">Gi√° s√†n</div>
              <div className="text-2xl font-bold text-cyan-300">
                {stockInfo.floorPrice.toFixed(2)}
              </div>
              <div className="text-xs text-cyan-400/70">-7%</div>
            </div>
          </div>

          {/* Additional Info */}
          <div className="grid grid-cols-2 md:grid-cols-3 gap-4 pt-4 border-t border-gray-700">
            <div>
              <span className="text-[--muted] text-sm">Kh·ªëi l∆∞·ª£ng giao d·ªãch:</span>
              <span className="ml-2 text-white font-semibold">
                {stockInfo.volume.toLocaleString()}
              </span>
            </div>

            {pivotPoints && (
              <>
                <div>
                  <span className="text-[--muted] text-sm">Woodie R3 (Kh√°ng c·ª±):</span>
                  <span className="ml-2 text-red-400 font-semibold">
                    {pivotPoints.R3.toFixed(2)}
                  </span>
                </div>
                <div>
                  <span className="text-[--muted] text-sm">Woodie S3 (H·ªó tr·ª£):</span>
                  <span className="ml-2 text-green-400 font-semibold">
                    {pivotPoints.S3.toFixed(2)}
                  </span>
                </div>
              </>
            )}
          </div>
        </div>
      )}

      {/* Chart Controls */}
      <div className="bg-[--panel] rounded-xl p-4 border border-gray-800">
        <div className="flex flex-col md:flex-row md:items-center gap-4">
          {/* Timeframe Selection */}
          <div className="flex items-center gap-2 flex-wrap">
            <span className="text-[--muted] mr-2">Khung th·ªùi gian:</span>
            {(['1d', '1w', '1m'] as Timeframe[]).map((tf) => (
              <button
                key={tf}
                onClick={() => setTimeframe(tf)}
                className={`px-4 py-2 rounded-lg transition-colors ${
                  timeframe === tf
                    ? 'bg-purple-600 text-white'
                    : 'bg-gray-800 text-gray-400 hover:bg-gray-700'
                }`}
              >
                {tf === '1d' ? 'Ng√†y' : tf === '1w' ? 'Tu·∫ßn' : 'Th√°ng'}
              </button>
            ))}
          </div>

          {/* Chart Type Selection */}
          <div className="flex items-center gap-2 flex-wrap md:ml-auto">
            <span className="text-[--muted] mr-2">Lo·∫°i bi·ªÉu ƒë·ªì:</span>
            <button
              onClick={() => setChartType('candlestick')}
              className={`px-4 py-2 rounded-lg transition-colors ${
                chartType === 'candlestick'
                  ? 'bg-purple-600 text-white'
                  : 'bg-gray-800 text-gray-400 hover:bg-gray-700'
              }`}
            >
              üìä N·∫øn
            </button>
            <button
              onClick={() => setChartType('line')}
              className={`px-4 py-2 rounded-lg transition-colors ${
                chartType === 'line'
                  ? 'bg-purple-600 text-white'
                  : 'bg-gray-800 text-gray-400 hover:bg-gray-700'
              }`}
            >
              üìà Line
            </button>
          </div>
        </div>
      </div>

      {/* Chart */}
      <div className="bg-[--panel] rounded-xl p-6 border border-gray-800">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-xl font-semibold text-white">
            {chartType === 'candlestick' ? 'Bi·ªÉu ƒë·ªì n·∫øn' : 'Bi·ªÉu ƒë·ªì ƒë∆∞·ªùng'} - {stockSymbol}
          </h3>
          <div className="text-sm text-[--muted]">
            {historicalData.length} ƒëi·ªÉm d·ªØ li·ªáu
            {timeframe === '1d' ? ' (ng√†y)' : timeframe === '1w' ? ' (tu·∫ßn)' : ' (th√°ng)'}
          </div>
        </div>

        {stockInfo && historicalData.length > 0 ? (
          <LightweightChart
            historicalData={historicalData}
            timeframe={timeframe}
            pivotPoints={pivotPoints}
            chartType={chartType}
          />
        ) : (
          <div className="h-[500px] w-full flex items-center justify-center bg-gray-800/30 rounded-lg">
            <div className="text-center text-gray-400">
              <p className="text-lg">Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã</p>
              <p className="text-sm mt-2">Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c ch·ªçn m√£ c·ªï phi·∫øu kh√°c</p>
            </div>
          </div>
        )}

        {/* Legend */}
        <div className="mt-6 flex flex-wrap gap-4 text-sm">
          <div className="flex items-center gap-2">
            <div className="w-6 h-0.5 bg-red-500" style={{ borderTop: '2px dashed #ef5350' }}></div>
            <span className="text-[--muted]">
              <strong className="text-red-400">R3</strong> - Kh√°ng c·ª± (ch·ªâ hi·ªÉn th·ªã 1/5 cu·ªëi)
            </span>
          </div>
          <div className="flex items-center gap-2">
            <div className="w-6 h-0.5 bg-green-500" style={{ borderTop: '2px dashed #26a69a' }}></div>
            <span className="text-[--muted]">
              <strong className="text-green-400">S3</strong> - H·ªó tr·ª£ (ch·ªâ hi·ªÉn th·ªã 1/5 cu·ªëi)
            </span>
          </div>
        </div>
      </div>

      {/* Technical Analysis Guide */}
      <div id="technical-analysis" className="bg-gradient-to-r from-purple-900/20 to-blue-900/20 rounded-xl p-6 border border-purple-700/30">
        <h3 className="text-xl font-semibold text-white mb-3 flex items-center gap-2">
          üìä Ph√¢n t√≠ch k·ªπ thu·∫≠t - Woodie Pivot Points
        </h3>
        <div className="space-y-4 text-sm text-gray-300">
          <div>
            <p className="font-semibold text-white mb-2">C√°ch s·ª≠ d·ª•ng R3 v√† S3:</p>
            <ul className="list-disc list-inside space-y-2 text-[--muted]">
              <li>
                <strong className="text-red-400">R3 (Resistance/Kh√°ng c·ª±):</strong> M·ª©c gi√° kh√≥ v∆∞·ª£t qua. Khi gi√° ch·∫°m R3, th∆∞·ªùng c√≥ √°p l·ª±c b√°n m·∫°nh, gi√° c√≥ xu h∆∞·ªõng quay ƒë·∫ßu gi·∫£m.
              </li>
              <li>
                <strong className="text-green-400">S3 (Support/H·ªó tr·ª£):</strong> M·ª©c gi√° kh√≥ th·ªßng qua. Khi gi√° ch·∫°m S3, th∆∞·ªùng c√≥ √°p l·ª±c mua m·∫°nh, gi√° c√≥ xu h∆∞·ªõng b·∫≠t l√™n.
              </li>
              <li>
                <strong className="text-yellow-400">Ph√° v·ª° R3:</strong> N·∫øu gi√° v∆∞·ª£t qua R3 v·ªõi kh·ªëi l∆∞·ª£ng l·ªõn, ƒë√¢y l√† t√≠n hi·ªáu xu h∆∞·ªõng tƒÉng m·∫°nh (bullish).
              </li>
              <li>
                <strong className="text-orange-400">Ph√° v·ª° S3:</strong> N·∫øu gi√° th·ªßng S3 v·ªõi kh·ªëi l∆∞·ª£ng l·ªõn, ƒë√¢y l√† t√≠n hi·ªáu xu h∆∞·ªõng gi·∫£m m·∫°nh (bearish).
              </li>
            </ul>
          </div>
          <div className="pt-3 border-t border-gray-700">
            <p className="text-xs text-gray-500">
              <strong>L∆∞u √Ω:</strong> N√™n k·∫øt h·ª£p th√™m c√°c ch·ªâ b√°o kh√°c v√† ph√¢n t√≠ch c∆° b·∫£n tr∆∞·ªõc khi ƒë∆∞a ra quy·∫øt ƒë·ªãnh giao d·ªãch.
            </p>
          </div>
        </div>
      </div>

      {/* Disclaimer */}
      <div className="bg-[--panel] rounded-xl p-6 border border-gray-800">
        <h3 className="text-lg font-semibold text-white mb-3">‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng</h3>
        <p className="text-[--muted] text-sm leading-relaxed">
          ƒê√¢y l√† d·ªØ li·ªáu m√¥ ph·ªèng (mock data) ch·ªâ ph·ª•c v·ª• m·ª•c ƒë√≠ch demo v√† h·ªçc t·∫≠p. ƒê·ªÉ s·ª≠
          d·ª•ng d·ªØ li·ªáu th·ª±c t·∫ø, vui l√≤ng t√≠ch h·ª£p v·ªõi c√°c API ch·ª©ng kho√°n nh∆∞{' '}
          <strong className="text-white">SSI iBoard</strong>,{' '}
          <strong className="text-white">VPS SmartOne</strong>, ho·∫∑c c√°c nh√† cung c·∫•p d·ªØ
          li·ªáu t√†i ch√≠nh kh√°c. Kh√¥ng n√™n s·ª≠ d·ª•ng d·ªØ li·ªáu n√†y ƒë·ªÉ ra quy·∫øt ƒë·ªãnh ƒë·∫ßu t∆∞ th·ª±c
          t·∫ø.
        </p>
      </div>
    </div>
  )
}
